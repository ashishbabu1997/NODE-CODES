export default {
    getProfiles: 'SELECT company_profile_url as "profileUrl",company_name as "name",company_domain as "domain",company_description as "description",company_logo as "logo",company_cover_page as "coverPage",company_tagline as "tagline",company_linkedin_id as "linkedinId",company_type as "accountType",user_id as "roleId",company_size_id "companySizeId",company_website as "website" FROM company WHERE company_id = $1',
    getCompanyProfile: 'SELECT c.company_profile_url as "profileUrl",c.company_name as "name",c.company_domain as "domain",c.company_description as "description",c.company_logo as "logo",c.company_cover_page as "coverPage",c.company_tagline as "tagline",c.company_linkedin_id as "linkedinId",c.company_type as "accountType",c.user_id as "roleId",c.company_size_id "companySizeId",c.company_website as "website" FROM company  c  WHERE c.company_id = $1 and c.status = true',
    getAccountType: 'SELECT account_type as "accountType" FROM employee WHERE company_id = $1',
    updateProfileDetails: "UPDATE company SET  company_profile_url= $1,company_description=$2,company_logo=$3,company_cover_page=$4,company_tagline=$5,company_linkedin_id=$6,profile_percentage=$7,company_type=$9,user_id=$10,company_website=$11,company_size_id=$12,currency_type_id=$13,updated_on=$14,updated_by=$15 WHERE company_id=$8",
    getProfilePercentage: 'SELECT profile_percentage as "profilePercentage" FROM company WHERE company_id = $1',
    updateLogo: "update company set company_logo=$2,updated_on=$3,updated_by=$4 where company_id=$1",
    getellowAdmins: "select concat(firstname,' ',lastname) as name ,email as email,employee_id as employeeId from employee where status=true and user_role_id=1",
    updateCoverPic: "update company set company_cover_page=$2,updated_on=$3,updated_by=$4 where company_id=$1",
    getPreferences: 'select is_ellow_rate as "isEllowRate" from company where company_id=$1;',
    updatePreferences: 'update company set is_ellow_rate=$2,updated_on=$3,updated_by=$4 where company_id=$1;',
    companyPositions: 'SELECT (select array(SELECT json_build_object(\'count\', COUNT(*), \'stageName\', case when chsv."positionStatusName" is null then \'Submitted to hirer\' else "positionStatusName" end) FROM candidate_hiring_steps_view chsv WHERE chsv."positionId" = p.position_id and chsv."cpStatus" = true and p.status = true AND chsv."adminApproveStatus" = 1 group by "positionStatusName", chsv."currentHiringStage" order by chsv."currentHiringStage" nulls first)) as "resourceSubCount", (select count(*) FROM candidate_hiring_steps_view chsv WHERE chsv."positionId" = p.position_id AND chsv."adminApproveStatus" = 1 and chsv."cpStatus" = true and p.status = true) as "totalResourceCount", (SELECT count(*) FROM candidate_hiring_steps_view chsv WHERE chsv."positionId" = p.position_id and chsv."cpStatus" = true and chsv."positionStatusName" = \'Resource accepted offer\' and p.status = true group by "positionStatusName") as "closedPositionCount", p.position_id as "positionId", (select concat(e.firstname, \' \', e.lastname) from employee e where e.employee_id = p.allocated_to) as "assigneeName", p.allocated_to as "allocatedTo", p.position_name as "positionName", p.developer_count as "resourceCount", p.location_name as "locationName", p.created_on as "createdOn", p.job_status as "jobStatus", p.type_of_job as "typeOfJob", c.company_name as "companyName", c.company_id as "companyId", jc.job_category_name as "jobCategoryName", p.job_category_id as "jobCategoryId", p.allow_remote as "allowRemote", p.experience_level as "experienceLevel", p.job_description as "jobDescription", p.job_document as "jobDocument", p.currency_type_id as "currencyTypeId", p.billing_type as "billingTypeId", p.min_budget as "minBudget", p.max_budget as "maxBudget", p.hiring_step_id as "hiringStepId", p.created_by as "createdBy", p.updated_by as "updated_by", p.deleted_by as "deletedBy", p.active_date as "activeDate", p.updated_on as "updatedOn", p.contract_duration as "contractDuration", p.immediate as "immediate", p.contract_start_date as "contractStartDate", p.status from positions p INNER JOIN company c ON c.company_id = p.company_id INNER JOIN job_category jc ON jc.job_category_id = p.job_category_id WHERE p.company_id = $1',
    companyResources : 'select distinct on ("candidateId", "candidateFirstName", "candidateLastName","companyName","updatedOn",availability,"createdOn", "workExperience",email) chsv."candidateId", (select concat(e.firstname, \' \', e.lastname) from employee e where e.employee_id = chsv."allocatedTo") as "assigneeName", chsv."allocatedTo" as "allocatedTo", chsv.availability, chsv."readyToStart", chsv."updatedOn", chsv."availabilityType", chsv."allocatedTo", chsv."candidatePositionName", chsv."remoteWorkExperience", chsv."ellowRate", chsv."email", chsv."createdOn", chsv."resume", chsv."currencyTypeId", chsv."billingTypeId", chsv."companyId", chsv."companyName", chsv."candidateFirstName", chsv."candidateLastName", chsv."rate", chsv."candidateStatus", chsv."candidateVetted", chsv."stageStatusName", chsv."createdBy", chsv."residence", chsv."image", chsv."candidatePositionName", (select (select json_agg(position) as positions from ((select "positionId", "positionName", "hirerCompanyName" as "companyName", "assignedTo", "makeOffer", "positionStatusName" from candidate_hiring_steps_view chsv2 where chsv2."candidateId" = chsv."candidateId" and chsv2."positionId" is not null)) as position)), chsv."blacklisted" from candidate_hiring_steps_view chsv where "companyId" = $1',
    inactivateCompany : ' update company set status = false where company_id=$1;',
    inactivatePositions : 'update positions set status=false where company_id=$1;',
    inactivateResources : 'update candidate set status=false where company_id=$1;',
    permanentDeleteCompany : 'delete from company where company_id=$1'
}
